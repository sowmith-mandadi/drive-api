"""
Test fixtures and configuration for pytest.
"""
import json
from unittest.mock import patch

import pytest
from fastapi.testclient import TestClient

from main import app


@pytest.fixture
def client():
    """
    Create FastAPI test client for testing API endpoints.
    """
    # Use TestClient with BaseURL to ensure CORS headers are properly set
    test_client = TestClient(
        app,
        base_url="http://localhost:8000",
        headers={"Origin": "http://localhost:4200"},  # Set origin header for CORS
    )

    yield test_client


@pytest.fixture
def authenticated_client():
    """
    Create an authenticated test client for testing endpoints that require auth.
    """
    # Create a client with authentication and CORS settings
    client = TestClient(
        app,
        base_url="http://localhost:8000",
        headers={"Origin": "http://localhost:4200"},  # Set origin header for CORS
    )

    # Mock authentication by setting a session cookie
    mock_credentials = {"token": "fake-token", "refresh_token": "fake-refresh-token"}

    # Set up the session
    with patch("app.api.endpoints.auth.Request") as mock_request:
        mock_request_instance = mock_request.return_value
        mock_request_instance.session = {"credentials": json.dumps(mock_credentials)}

        client.cookies.set("session", "mock-session-value")

        yield client


@pytest.fixture
def mock_drive_service():
    """
    Mock Google Drive service for testing drive API interactions.
    """
    with patch("app.services.drive_service.build_drive_service") as mock_build:
        mock_service = mock_build.return_value

        # Mock the files().list().execute() method
        mock_files_list = mock_service.files.return_value.list.return_value.execute
        mock_files_list.return_value = {
            "files": [
                {"id": "test-file-1", "name": "Test File 1.pdf", "mimeType": "application/pdf"},
                {
                    "id": "test-file-2",
                    "name": "Test File 2.docx",
                    "mimeType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                },
            ]
        }

        # Mock the files().get().execute() method
        mock_files_get = mock_service.files.return_value.get.return_value.execute
        mock_files_get.return_value = {
            "id": "test-file-1",
            "name": "Test File 1.pdf",
            "mimeType": "application/pdf",
            "webViewLink": "https://drive.google.com/file/d/test-file-1/view",
        }

        yield mock_service


@pytest.fixture
def test_content_id():
    """
    Generate a fixed content ID for testing.
    """
    return "test-content-123"


@pytest.fixture
def test_content_data():
    """
    Create test content data for content API tests.
    """
    return {
        "title": "Test Content for Testing",
        "description": "This is test content for automated testing",
        "content_type": "text",
        "source": "upload",
        "tags": ["test", "api", "automated"],
        "metadata": {"testing": True, "category": "testing"},
    }


@pytest.fixture
def mock_firestore_client():
    """
    Mock Firestore client for testing database operations.
    """
    with patch("app.db.firestore_client.FirestoreClient") as mock_client:
        instance = mock_client.return_value

        # Mock collection document operations
        mock_collection = instance.collection.return_value
        mock_document = mock_collection.document.return_value

        # Mock get operation
        mock_document.get.return_value = {
            "id": "test-content-123",
            "title": "Test Content",
            "description": "Test description",
            "content_type": "text",
            "created_at": "2023-04-01T12:00:00Z",
            "updated_at": "2023-04-01T12:00:00Z",
            "tags": ["test"],
            "metadata": {"testing": True},
        }

        # Mock query operations
        mock_query = mock_collection.where.return_value
        mock_query.get.return_value = [
            {"id": "test-content-123", "title": "Test Content", "description": "Test description"}
        ]

        yield instance


@pytest.fixture
def mock_rag_service():
    """
    Mock RAG service for testing RAG capabilities.
    """
    with patch("app.services.rag_service.RAGService") as mock_service:
        instance = mock_service.return_value

        # Mock answer generation
        instance.generate_answer.return_value = {
            "answer": "This is a test answer generated by the mock RAG service.",
            "sources": ["test-content-123"],
            "model_used": "mock-model",
        }

        # Mock summarization
        instance.generate_summary.return_value = "This is a test summary of the content."

        # Mock tag generation
        instance.generate_tags.return_value = ["test", "mock", "api"]

        yield instance


def pytest_configure(config):
    """
    Custom pytest configuration.
    """
    # Register custom markers
    config.addinivalue_line("markers", "integration: mark test as an integration test")
    config.addinivalue_line("markers", "unit: mark test as a unit test")
    config.addinivalue_line("markers", "e2e: mark test as an end-to-end test")
    config.addinivalue_line("markers", "performance: mark test as a performance test")
